name: Build and Release OP Media Downloader

on:
  release:
    types: [created]

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Build for Windows
        run: yarn run build:win

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v3
        with:
          name: op-media-downloader-windows
          path: dist/*.exe

  build-mac:
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [x64, arm64]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install

      - name: Prepare signing certificate
        env:
          CERTIFICATE: ${{ secrets.MAC_CERTIFICATE }}
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          echo "$CERTIFICATE" | base64 --decode > certificate.p12

      - name: Configure macOS keychain for signing
        env:
          CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security import certificate.p12 -k build.keychain -P "$CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          security find-identity -v -p codesigning build.keychain

      - name: Build and sign for macOS
        env:
          ARCH: ${{ matrix.arch }}
          CSC_LINK: certificate.p12
          CSC_KEY_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          yarn run build:mac

      - name: Find the generated .dmg file
        id: find-dmg
        run: |
          dmg_file=$(find dist -name "*.dmg" | head -n 1)
          if [ -z "$dmg_file" ]; then
            echo "Error: No .dmg file found in the dist directory."
            exit 1
          fi
          echo "Found .dmg file: $dmg_file"
          echo "dmg_file=$dmg_file" >> $GITHUB_ENV

      - name: Notarize the macOS app with notarytool
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          DMG_FILE: ${{ env.dmg_file }}
        run: |
          xcrun notarytool store-credentials "AC_PASSWORD" --apple-id "$APPLE_ID" --password "$APPLE_ID_PASSWORD" --team-id "$TEAM_ID"

          # Submit for notarization
          notarization_output=$(xcrun notarytool submit "$DMG_FILE" --keychain-profile "AC_PASSWORD" --wait)
          echo "$notarization_output"

          # Extract submission ID from the output
          submission_id=$(echo "$notarization_output" | grep -oE 'id: [a-f0-9\-]+' | cut -d' ' -f2)
          if [ -z "$submission_id" ]; then
            echo "Error: Submission ID not found."
            exit 1
          fi
          echo "Submission ID: $submission_id"

      - name: Retrieve notarization logs on failure
        if: failure()
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [ -z "$submission_id" ]; then
            echo "Error: Submission ID not found. Cannot retrieve logs."
            exit 1
          fi
  
          echo "Retrieving logs for submission ID: $submission_id"
          xcrun notarytool log "$submission_id" --keychain-profile "AC_PASSWORD" --output notarization-log.json
  
          echo "Detailed notarization log:"
          cat notarization-log.json
          
      - name: Staple notarization ticket
        run: |
          xcrun stapler staple "${{ env.dmg_file }}"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v3
        with:
          name: op-media-downloader-mac-${{ matrix.arch }}
          path: dist/*.dmg

  release:
    needs:
      - build-windows
      - build-mac
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Windows artifact
        uses: actions/download-artifact@v3
        with:
          name: op-media-downloader-windows
          path: release/windows

      - name: Download macOS artifacts
        uses: actions/download-artifact@v3
        with:
          name: op-media-downloader-mac-x64
          path: release/mac-x64

      - name: Download macOS ARM artifact
        uses: actions/download-artifact@v3
        with:
          name: op-media-downloader-mac-arm64
          path: release/mac-arm64

      - name: Upload assets to the latest release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the latest release tag
          LATEST_RELEASE=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          echo "Latest release tag: $LATEST_RELEASE"

          if [ -z "$LATEST_RELEASE" ]; then
            echo "Error: No release found."
            exit 1
          fi

          # Upload assets
          gh release upload "$LATEST_RELEASE" \
            release/windows/*.exe \
            release/mac-x64/*.dmg \
            release/mac-arm64/*.dmg \
            --clobber
